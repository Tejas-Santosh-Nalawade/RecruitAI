"use client"

import { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { 
  Mic, 
  MicOff,
  Play,
  RotateCcw,
  CheckCircle,
  Brain,
  Zap,
  Volume2
} from 'lucide-react'

export default function VoiceScreeningPage() {
  const params = useParams()
  const candidateId = params.candidateId as string
  
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [isRecording, setIsRecording] = useState(false)
  const [isPlaying, setIsPlaying] = useState(false)
  const [responses, setResponses] = useState<any[]>([])
  const [isCompleted, setIsCompleted] = useState(false)
  const [timeRemaining, setTimeRemaining] = useState(120) // 2 minutes per question
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null)
  const [audioChunks, setAudioChunks] = useState<Blob[]>([])

  const questions = [
    {
      id: 'q1',
      question: 'Tell me about your experience with the technologies mentioned in the job description. What projects have you worked on that demonstrate your skills?',
      type: 'technical',
      maxDuration: 120
    },
    {
      id: 'q2',
      question: 'Describe a challenging technical problem you encountered in a recent project. How did you approach solving it?',
      type: 'problem-solving',
      maxDuration: 120
    },
    {
      id: 'q3',
      question: 'How do you stay updated with the latest technology trends and best practices in your field?',
      type: 'learning',
      maxDuration: 90
    },
    {
      id: 'q4',
      question: 'Tell me about a time when you had to work with a difficult team member or stakeholder. How did you handle the situation?',
      type: 'behavioral',
      maxDuration: 90
    }
  ]

  useEffect(() => {
    let interval: NodeJS.Timeout
    if (isRecording && timeRemaining > 0) {
      interval = setInterval(() => {
        setTimeRemaining(prev => prev - 1)
      }, 1000)
    } else if (timeRemaining === 0 && isRecording) {
      stopRecording()
    }
    return () => clearInterval(interval)
  }, [isRecording, timeRemaining])

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      const recorder = new MediaRecorder(stream)
      
      recorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          setAudioChunks(prev => [...prev, event.data])
        }
      }
      
      recorder.onstop = () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' })
        const audioUrl = URL.createObjectURL(audioBlob)
        
        // Save response
        const response = {
          questionId: questions[currentQuestion].id,
          question: questions[currentQuestion].question,
          audioUrl,
          audioBlob,
          duration: questions[currentQuestion].maxDuration - timeRemaining,
          timestamp: new Date()
        }
        
        setResponses(prev => [...prev, response])
        setAudioChunks([])
      }
      
      setMediaRecorder(recorder)
      recorder.start()
      setIsRecording(true)
      setTimeRemaining(questions[currentQuestion].maxDuration)
    } catch (error) {
      console.error('Error starting recording:', error)
    }
  }

  const stopRecording = () => {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
      mediaRecorder.stop()
      mediaRecorder.stream.getTracks().forEach(track => track.stop())
    }
    setIsRecording(false)
  }

  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(prev => prev + 1)
      setTimeRemaining(questions[currentQuestion + 1].maxDuration)
    } else {
      completeScreening()
    }
  }

  const completeScreening = async () => {
    setIsCompleted(true)
    
    // Submit responses to API
    try {
      const response = await fetch('/api/ai/voice-screening', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          candidateId,
          responses: responses.map(r => ({
            questionId: r.questionId,
            question: r.question,
            audioUrl: r.audioUrl,
            duration: r.duration,
            transcript: 'Transcript will be generated by AI...' // Placeholder
          }))
        })
      })
      
      const result = await response.json()
      console.log('Screening completed:', result)
    } catch (error) {
      console.error('Error submitting screening:', error)
    }
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const playResponse = (audioUrl: string) => {
    const audio = new Audio(audioUrl)
    audio.play()
    setIsPlaying(true)
    audio.onended = () => setIsPlaying(false)
  }

  if (isCompleted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center p-4">
        <Card className="max-w-md w-full shadow-lg border-0">
          <CardContent className="p-8 text-center">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <CheckCircle className="h-8 w-8 text-green-600" />
            </div>
            <h1 className="text-2xl font-bold text-gray-900 mb-4">Screening Complete!</h1>
            <p className="text-gray-600 mb-6">
              Thank you for completing the AI voice screening. Our system is now analyzing your responses.
            </p>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <div className="flex items-center space-x-2 mb-2">
                <Brain className="h-5 w-5 text-blue-600" />
                <span className="font-semibold text-blue-900">What happens next?</span>
              </div>
              <ul className="text-sm text-blue-800 space-y-1 text-left">
                <li>• AI analyzes your voice responses</li>
                <li>• Resume and screening scores are calculated</li>
                <li>• You'll be ranked against other candidates</li>
                <li>• Recruiter will review top candidates</li>
              </ul>
            </div>
            <p className="text-sm text-gray-500">
              You'll receive an email update within 24-48 hours about your application status.
            </p>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="flex items-center justify-center space-x-2 mb-4">
              <Brain className="h-8 w-8 text-blue-600" />
              <span className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                RecruitAI
              </span>
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">AI Voice Screening</h1>
            <p className="text-gray-600">Answer the questions clearly and naturally</p>
          </div>

          {/* Progress */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">
                Question {currentQuestion + 1} of {questions.length}
              </span>
              <span className="text-sm text-gray-500">
                {Math.round(((currentQuestion + 1) / questions.length) * 100)}% Complete
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-gradient-to-r from-blue-600 to-purple-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
              />
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Main Question Card */}
            <div className="lg:col-span-2">
              <Card className="shadow-lg border-0 h-full">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-2">
                      <Mic className="h-5 w-5 text-blue-600" />
                      <span>Question {currentQuestion + 1}</span>
                    </CardTitle>
                    <Badge variant="outline" className="capitalize">
                      {questions[currentQuestion].type}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="bg-gray-50 rounded-lg p-6">
                    <p className="text-lg text-gray-800 leading-relaxed">
                      {questions[currentQuestion].question}
                    </p>
                  </div>

                  {/* Recording Controls */}
                  <div className="text-center space-y-4">
                    <div className="flex items-center justify-center space-x-4">
                      <div className={`w-16 h-16 rounded-full flex items-center justify-center transition-all duration-300 ${
                        isRecording 
                          ? 'bg-red-100 border-4 border-red-500 animate-pulse' 
                          : 'bg-blue-100 border-4 border-blue-500'
                      }`}>
                        {isRecording ? (
                          <MicOff className="h-8 w-8 text-red-600" />
                        ) : (
                          <Mic className="h-8 w-8 text-blue-600" />
                        )}
                      </div>
                    </div>

                    {isRecording && (
                      <div className="space-y-2">
                        <div className="text-2xl font-bold text-red-600">
                          {formatTime(timeRemaining)}
                        </div>
                        <p className="text-sm text-gray-600">Recording in progress...</p>
                      </div>
                    )}

                    <div className="flex items-center justify-center space-x-3">
                      {!isRecording ? (
                        <Button
                          onClick={startRecording}
                          size="lg"
                          className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                        >
                          <Mic className="h-5 w-5 mr-2" />
                          Start Recording
                        </Button>
                      ) : (
                        <Button
                          onClick={stopRecording}
                          size="lg"
                          variant="destructive"
                        >
                          <MicOff className="h-5 w-5 mr-2" />
                          Stop Recording
                        </Button>
                      )}
                    </div>

                    {responses[currentQuestion] && (
                      <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <CheckCircle className="h-5 w-5 text-green-600" />
                            <span className="text-green-800 font-medium">Response recorded</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => playResponse(responses[currentQuestion].audioUrl)}
                              disabled={isPlaying}
                            >
                              {isPlaying ? (
                                <Volume2 className="h-4 w-4" />
                              ) : (
                                <Play className="h-4 w-4" />
                              )}
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => {
                                setResponses(prev => prev.filter((_, i) => i !== currentQuestion))
                              }}
                            >
                              <RotateCcw className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
              {/* Tips Card */}
              <Card className="shadow-md border-0">
                <CardHeader>
                  <CardTitle className="text-lg">💡 Tips for Success</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="text-sm text-gray-600 space-y-2">
                    <li>• Speak clearly and at a normal pace</li>
                    <li>• Use specific examples from your experience</li>
                    <li>• Take a moment to think before answering</li>
                    <li>• Be concise but thorough</li>
                    <li>• Show enthusiasm and passion</li>
                  </ul>
                </CardContent>
              </Card>

              {/* Progress Card */}
              <Card className="shadow-md border-0">
                <CardHeader>
                  <CardTitle className="text-lg">📊 Your Progress</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {questions.map((q, index) => (
                      <div key={q.id} className="flex items-center space-x-3">
                        <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-semibold ${
                          index < currentQuestion 
                            ? 'bg-green-100 text-green-800' 
                            : index === currentQuestion
                            ? 'bg-blue-100 text-blue-800'
                            : 'bg-gray-100 text-gray-600'
                        }`}>
                          {index < currentQuestion ? (
                            <CheckCircle className="h-4 w-4" />
                          ) : (
                            index + 1
                          )}
                        </div>
                        <span className={`text-sm ${
                          index <= currentQuestion ? 'text-gray-900' : 'text-gray-500'
                        }`}>
                          {q.type.charAt(0).toUpperCase() + q.type.slice(1)} Question
                        </span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Navigation */}
              <div className="flex flex-col space-y-3">
                {responses[currentQuestion] && (
                  <Button
                    onClick={nextQuestion}
                    className="w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700"
                  >
                    {currentQuestion === questions.length - 1 ? (
                      <>
                        <CheckCircle className="h-4 w-4 mr-2" />
                        Complete Screening
                      </>
                    ) : (
                      <>
                        Next Question
                        <Zap className="h-4 w-4 ml-2" />
                      </>
                    )}
                  </Button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}